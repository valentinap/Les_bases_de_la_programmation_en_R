- Class: meta
  Course: Les bases de la programmation en R
  Lesson: Section 3
  Author: Valentina Porcu
  Type: Standard
  Organization: DataWiring
  Version: 2.4.3
  

- Class: text
  Output: Dans cette leçon, nous voyons quelques exercices sur les matrices
  
- Class: text
  Output: Appuyez sur Entrée pour aller de l'avant avec des questions. Si vous trouvez des difficultés avec une question, vous pouvez toujours entrer la commande skip() pour obtenir la solution et passer à la prochaine

- Class: cmd_question
  Output: Pour créer une matrice il faut utiliser la fonction matrix(). Ajoutez dans la matrice mat1 les chiffres entre 12 et 23, réparties sur 3 lignes et 4 colonnes. Le paramètre pour le nombre de lignes est nrow, une pour le nombre de colonnes ncol
  CorrectAnswer: mat1 <- matrix(12:23, nrow=3, ncol=4)
  AnswerTests: omnitest(correctExpr='mat1 <- matrix(12:23, nrow=3, ncol=4)')
  Hint: Essaie avec mat1 <- matrix(12:23, nrow=3, ncol=4)

- Class: cmd_question
  Output: Maintenant créons une matrice mat2 en trasposant la matrice mat1 avec la fonction t()
  CorrectAnswer: mat2 <- t(mat1)
  AnswerTests: omnitest(correctExpr='mat2 <- t(mat1)')
  Hint: Essaie avec mat2 <- t(mat1)
  
- Class: cmd_question
  Output: Pour découvrir le nombre des colonnes on utilisera la fonction ncol()
  CorrectAnswer: ncol(mat2)
  AnswerTests: omnitest(correctExpr='ncol(mat2)')
  Hint: Essaie avec ncol(mat2)
  
- Class: cmd_question
  Output: Maintenant le nombre des lignes avec la fonction nrow()
  CorrectAnswer: nrow(mat2)
  AnswerTests: omnitest(correctExpr='nrow(mat2)')
  Hint: Essaie avec nrow(mat2)

- Class: text
  Output: Dans mat1 on avait 3 lignes et 4 colonnes, dans mat2 c’est le contraire, c’est à dire che la matrice a été transposée correctement!
  
- Class: cmd_question
  Output: Créon un objet car1 avec les lettres de “a” à “l” inclues 
  CorrectAnswer: car1 <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", “j”, “k”, “l”)
  AnswerTests: omnitest(correctExpr='car1 <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", “j”, “k”, “l”)')
  Hint: Essaie avec car1 <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", “j”, “k”, “l”)
  
- Class: cmd_question
  Output: Maintenant il faut organiser l’objet car1 dans une matrice mat3 qui aura 4 lignes et 3 colonnes
  CorrectAnswer: mat3 <- matrix(car1, nrow = 4, ncol = 3)
  AnswerTests: omnitest(correctExpr='mat3 <- matrix(car1, nrow = 4, ncol = 3)')
  Hint: Essaie avec mat3 <- matrix(car1, nrow = 4, ncol = 3)
  
- Class: cmd_question
  Output: Affichons l’objet mat3 sans utiliser la fonction print()
  CorrectAnswer: mat3
  AnswerTests: omnitest(correctExpr='mat3')
  Hint: Essaie avec mat3
  
- Class: cmd_question
  Output: Pour sélectionner un élément qui se trouve dans une matrice, il faut indiquer d’abord la position de la ligne et après celle de la colonne. N’oublie pas d’utiliser les crochets et de diviser les deux cordinates par le comma 
  CorrectAnswer: mat3[1,1]
  AnswerTests: omnitest(correctExpr='mat3[1,1]')
  Hint: Essaie avec mat3[1,1]
  
- Class: cmd_question
  Output: Maintenant nous allons sélectionner toute la deuxième colonne
  CorrectAnswer: mat3[,2]
  AnswerTests: omnitest(correctExpr='mat3[,2]')
  Hint: Essaie avec mat3[,2]
  
- Class: cmd_question
  Output: Les lignes de la première à la troisième inclue
  CorrectAnswer: mat3[1:3,]
  AnswerTests: omnitest(correctExpr='mat3[1:3,]')
  Hint: Essaie avec mat3[1:3,]

- Class: cmd_question
  Output: On avait créé les matrices mat1 et mat2, une avec 4 lignes, une avec 3 lignes (imprime-les dans la console, si tu veux). Nous allons maintenant faire la somme des premières deux lignes et des premières trois colonnes. Il faut utiliser le subsetting comme on a vu avant
  CorrectAnswer: mat1[1:2, 1:3] + mat2[1:2, 1:3]
  AnswerTests: omnitest(correctExpr='mat1[1:2, 1:3] + mat2[1:2, 1:3]')
  Hint: Essaie avec mat1[1:2, 1:3] + mat2[1:2, 1:3]
  
- Class: cmd_question
  Output: Maintenant nous reprenons en consideration la matrice mat3. Attribuons les noms Col1, Col2 et Col3 aux colonnes avec la fonction colnames(). Il faut utiliser les guillemets!
  CorrectAnswer: colnames(mat3) <- c("Col1", "Col2", "Col3")
  AnswerTests: omnitest(correctExpr='colnames(mat3) <- c("Col1", "Col2", "Col3")')
  Hint: Essaie avec colnames(mat3) <- c("Col1", "Col2", "Col3")

- Class: cmd_question
  Output: Affichons la matrice mat3
  CorrectAnswer: mat3
  AnswerTests: omnitest(correctExpr='mat3')
  Hint: Essaie avec mat3

- Class: text
  Output: Les colonnes de la matrice ont correctement leur nom!

- Class: cmd_question
  Output: Créons un objet r1 qui contient 3 éléments, "xy", "zx", "rx"
  CorrectAnswer: r1 <- c("xy", "zx", "rx")
  AnswerTests: omnitest(correctExpr='r1 <- c("xy", "zx", "rx")')
  Hint: Essaie avec r1 <- c("xy", "zx", "rx")
  

- Class: cmd_question
  Output: Ajoute r1 à mat3 avec la fonction rbind(). Remplace ce nouvel objet avec le nom mat3 
  CorrectAnswer: mat3 <- rbind(mat3, r1)
  AnswerTests: omnitest(correctExpr='mat3 <- rbind(mat3, r1)')
  Hint: Essaie avec mat3 <- rbind(mat3, r1)
