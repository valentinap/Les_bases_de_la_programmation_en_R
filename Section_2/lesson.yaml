- Class: meta
  Course: Les bases de la programmation en R
  Lesson: Section 2
  Author: Valentina Porcu
  Type: Standard
  Organization: DataWiring
  Version: 2.4.3


- Class: text
  Output: Bienvenue! Nous allons maintenant créer des vecteurs et effectuer des opérations 

- Class: text
  Output: Jusqu'ici, nous avons créé des objets contenant jusq'un nombre, à partir de ce moment on va créeer des objets plus complexes
  
- Class: text
  Output: Appuyez sur Entrée pour aller de l'avant avec des questions. Si vous trouvez des difficultés avec une question, vous pouvez toujours entrer la commande skip() pour obtenir la solution et passer à la prochaine
  
- Class: cmd_question
  Output: Allons créer tout d’abord un vecteur numérique qu’on appelera vn qui va contenir les numéros 2, 5, 9, 14. N’oublie pas d’utiliser la fonction c().
  CorrectAnswer: vn <- c(2, 5, 9, 14)
  AnswerTests: omnitest(correctExpr='vn <- c(2, 5, 9, 14)')
  Hint: Essaie avec vn <- c(2, 5, 9, 14)
  
- Class: text
  Output: Super! Nous allons de l'avant avec un vecteur de caractères
  
- Class: cmd_question
  Output: Maintenant nous créons un vecteur de caractères vc qui contient le villes de Paris, Rome, Strasbourg. N’oublie pas d’utiliser la function c() et de mettre les noms entre guillemets
  CorrectAnswer: vc <- c(“Paris”, “Rome”, “Strasbourg”)
  AnswerTests: omnitest(correctExpr='vc <- c(“Paris”, “Rome”, “Strasbourg”)')
  Hint: Essaie avec vc <- c(“Paris”, “Rome”, “Strasbourg”)
  
  
- Class: cmd_question
  Output: Maintenant, nous créons un vecteur logique vl contenant 2 FALSE et 3 TRUE
  CorrectAnswer: vl <- c(FALSE, FALSE, TRUE, TRUE, TRUE)
  AnswerTests: omnitest(correctExpr='vl <- c(FALSE, FALSE, TRUE, TRUE, TRUE)')
  Hint: Essaie avec vl <- c(FALSE, FALSE, TRUE, TRUE, TRUE)

- Class: cmd_question
  Output: Maintenant, nous affichons le vecteur vn
  CorrectAnswer: vn
  AnswerTests: omnitest(correctExpr='vn')
  Hint: Essaie avec vn
  
- Class: cmd_question
  Output: Nous allons maintenant calculer la moyenne sur le vecteur vn avec la fonction mean()
  CorrectAnswer: mean(vn)
  AnswerTests: omnitest(correctExpr='mean(vn)')
  Hint: Essaie avec mean(vn)
  
- Class: cmd_question
  Output: Créons un autre vecteur numérique vn2 qui contient les chiffres 4, 7, 11, 21. Il faut utiliser la fonction c()
  CorrectAnswer: vn2 <- c(4, 7, 11, 21)
  AnswerTests: omnitest(correctExpr='vn2 <- c(4, 7, 11, 21)')
  Hint: Essaie avec vn2 <- c(4, 7, 11, 21)
  
- Class: cmd_question
  Output: Faisons la somme de vn et vn2
  CorrectAnswer: vn + vn2
  AnswerTests: omnitest(correctExpr='vn + vn2')
  Hint: Essaie avec vn + vn2
  
- Class: cmd_question
  Output: Nous allons maintenant ranger le vecteur vn2 avec la fonction sort() 
  CorrectAnswer: sort(vn2)
  AnswerTests: omnitest(correctExpr='sort(vn2)')
  Hint: Essaie avec sort(vn2)

- Class: cmd_question
  Output: Nous allons sélectionner le deuxième élément du vecteur vc 
  CorrectAnswer: vc[2]
  AnswerTests: omnitest(correctExpr='vc[2]')
  Hint: Essaie avec vc[2]
  
- Class: cmd_question
  Output: Maintenant le premier et le troisième élément
  CorrectAnswer: vc[c(1, 3)]
  AnswerTests: omnitest(correctExpr='vc[c(1, 3)]')
  Hint: Essaie avec  vc[c(1, 3)]
  
- Class: cmd_question
  Output: Avec la fonction seq() nous allons créer une liste de nombres de 1 à 20, qui s’appelera seq1
  CorrectAnswer: seq1 <- seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq1 <- seq(1, 20)')
  Hint: Essaie avec seq1 <- seq(1, 20)
  

- Class: cmd_question
  Output: De seq1 nous voulons extraire les éléments du 5ème au 9ème
  CorrectAnswer: seq1[5:9]
  AnswerTests: omnitest(correctExpr='seq1[5:9]')
  Hint: Essaie avec seq1[5:9]
  
- Class: cmd_question
  Output: Toujours à partir de notre objet seq1 allons remplacer le deuxième élément avec la chaîne “nouvel objet”
  CorrectAnswer: seq1[2] = “nouvel objet“
  AnswerTests: omnitest(correctExpr='seq1[2] = "nouvel objet"')
  Hint: Essaie avec seq1[2] = "nouvel objet"
  
- Class: cmd_question
  Output: Affichons seq1
  CorrectAnswer: print(seq1)
  AnswerTests: omnitest(correctExpr='print(seq1)')
  Hint: Essaie avec print(seq1)
  
- Class: cmd_question
  Output: Continuons avec le vecteur vn. Nous vérifions sa nature avec la fonction is.vector()
  CorrectAnswer: is.vector(vn)
  AnswerTests: omnitest(correctExpr='is.vector(vn)')
  Hint: Essaie avec is.vector(vn)
  
- Class: cmd_question
  Output: Maintenant, nous allons changer la nature du vecteur vn avec la fonction as.character(). Sauvegardez le résultat dans un nouveau objet vnc
  CorrectAnswer: vnc <- as.character(vn)
  AnswerTests: omnitest(correctExpr='vnc <- as.character(vn)')
  Hint: Essaie avec vnc <- as.character(vn)

- Class: cmd_question
  Output: Affichons vnc, sans utiliser la fonction print()
  CorrectAnswer: vnc
  AnswerTests: omnitest(correctExpr='vnc')
  Hint: Essaie avec vnc

- Class: text
  Output: Vous voyez? Chaque élément du nouveau vecteur est séparée par des guillemets, qui l'identifient comme vecteur de caractères!
